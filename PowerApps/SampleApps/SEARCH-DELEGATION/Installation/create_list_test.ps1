#Import the required DLL
Import-Module 'C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.dll'
#OR
#Add-Type -Path 'C:\Program Files\Common Files\Microsoft Shared\Web Server Extensions\16\ISAPI\Microsoft.SharePoint.Client.dll'

#Mysite URL
$site = 'https://davidscardworld.sharepoint.com/sites/PowerAppsSiteSearch'

#Admin User Principal Name
$admin = 'Beimar@DavidsCardWorld.onmicrosoft.com'

#Get Password as secure String
$password = Read-Host 'Enter Password' -AsSecureString
#$password = ConvertTo-SecureString "YourPassword" -asplaintext -force
#Get the Client Context and Bind the Site Collection
$context = New-Object Microsoft.SharePoint.Client.ClientContext($site)

#Authenticate
$credentials = New-Object Microsoft.SharePoint.Client.SharePointOnlineCredentials($admin , $password)
$context.Credentials = $credentials

#Create List
$listCreationInformation = New-Object Microsoft.SharePoint.Client.ListCreationInformation
$listCreationInformation.Title = "testSearchList"
$listCreationInformation.Description = "testSearchList created through PowerShell"
$listCreationInformation.TemplateType = 100
$list = $context.Web.Lists.Add($listCreationInformation)
$context.Load($list)
$context.ExecuteQuery()

#workflowStatus - Choice
$list.Fields.AddFieldAsXml("<Field Type='Choice' DisplayName='WorkflowStatus' Name='WorkflowStatus' StaticName='WorkflowStatus' >
                            <CHOICES>
                                <CHOICE>Not Started</CHOICE>
                                <CHOICE>Open</CHOICE>
                                <CHOICE>Closed</CHOICE>
                                <CHOICE>Approved</CHOICE>
                                <CHOICE>Rejected</CHOICE>   
                                <CHOICE>Completed</CHOICE>                                                     
                            </CHOICES></Field>",$true,[Microsoft.SharePoint.Client.AddFieldOptions]::AddFieldToDefaultView)
$list.Update()
$context.ExecuteQuery()

#Comments - Notes
$list.Fields.AddFieldAsXml("<Field Type='Note' NumLines='6' DisplayName='Comments' Name='Comments' StaticName='Comments'/>",$true,[Microsoft.SharePoint.Client.AddFieldOptions]::AddFieldToDefaultView)
$list.Update()
$context.ExecuteQuery()

#Hide the list
# $list.Hidden = $True
# $list.Update()
# $context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Closed"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Open"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Approved"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Rejected"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 25"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control30"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 38"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 39" 
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 43"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 46"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 47"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 48"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 49"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 50"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 51"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 52"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 53"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 54"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 55"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 56"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 57"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 58"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 59"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 60"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 61"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 1"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 2"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? -3"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 4"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 5"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 6"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 7"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 8"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 9"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 10"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 11"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 12"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 13"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 14"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 15"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 16"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 17"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 18"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 19"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 20"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 21"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 22"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 23"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 24"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 26"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 27"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 28"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 29"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 320"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 31"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 32"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 33"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? 34"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 35"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 37"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 36"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 39"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 40"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 41"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 42"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps? - 44"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = " Flow faster than PowerApps?- 45"
$item["WorkflowStatus"] = "Reject"
$item["Comments"] = "Ive setup my test to fetch 10 results. Result of it: 1 second! 1 second is the time that PowerApps need to fetch 10 results from flow and extracting required field values (Title in this case). But that was not enough to me. I thought: lets see how long will it takes to get 100 results and extract 4 fields. The results surprised me. 1 second again!"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 13"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 14"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 15"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 16"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 17"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 18"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 19"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 20"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 21"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 22"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 23"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 24"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 25"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 26"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Make column-level adjustments in the Data table control 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "When we first released the Data table control, the only control that an app maker had over column behavior and appearance was the ability to select the fields that appear in the Data table control. A field that was selected then determined the width and label for the column. The styling was consistent for all columns in the Data table control and was controlled by properties on the Data table control itself."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCS Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Initial Notification Email"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "HCPCS Quartely Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "ICD-10-CM Quarterly Update"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "IC-10-PCS Quarterly Update 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Other Medical Code Updates 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "Hi,Your form 1158 got submitted to '{Supervisor}'.Form Title - '{Title}'Thank You"
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 1"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 2"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 3"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 4"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 5"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 6"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 7"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 8"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 9"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 10"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 11"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

#Adds an item to the list
$listItemInfo = New-Object Microsoft.SharePoint.Client.ListItemCreationInformation
$item = $list.AddItem($listItemInfo)
$item["Title"] = "Search Web Part 12"
$item["WorkflowStatus"] = "Not Started"
$item["Comments"] = "The Search Box Web Part shows a text box where users can enter words or phrases to search for information. By default, the Search Box Web Part is used on the home page for the Search Center (default.aspx), and all default search results pages (Everything, People, Conversations, and Videos). As a global or SharePoint admin in Office 365, you can change settings in the Search Box Web Part. You can: Change where the search results should be displayed  results in a custom Search Results Web Part or a custom search results page. Turn off query suggestions and people suggestions. Show links to a search preference page and an advanced search page. Change the display template that is used for the Web Part."
$item.Update()
$Context.ExecuteQuery()

Write-Output "List has been created successfully!."
